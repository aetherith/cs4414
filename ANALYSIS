# Thomas Foulds (tcf9bj)
# Hong Moon (hsm5xw)
# Analysis for Assignment 2

1:  Transcript of ps follows:
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
aetheri+ 11041  0.0  0.0  30292  3628 pts/5    SNs  16:44   0:00 zsh
aetheri+ 11964  0.3  0.0 245540 19148 pts/5    SN+  17:31   0:05  \_ emacs -nw ANALYSIS
aetheri+ 10393  0.0  0.0  30292  3628 pts/6    SNs  16:12   0:00 zsh
aetheri+ 12456  0.0  0.0   4212   344 pts/6    SN+  17:57   0:00  \_ ./lab2sh
aetheri+ 12459 39.2  0.0  24360  4852 pts/6    RN+  17:57   0:02      \_ ls -alR /
aetheri+ 12464  0.0  0.0  10828  1368 pts/6    RN+  17:57   0:00      \_ ps -uf
aetheri+ 29113  0.0  0.0  32532  3960 pts/3    SNs  Feb05   0:00 zsh
aetheri+ 29173  0.0  0.0  12972  1072 pts/3    SN+  Feb05   0:00  \_ less btransx264
aetheri+ 19925  0.0  0.0  32760  4240 pts/2    SNs  Feb05   0:00 zsh
aetheri+ 10381  0.0  0.0  17140  1036 pts/2    SN+  16:12   0:00  \_ screen
aetheri+ 19867  0.0  0.0  30288  3504 pts/4    SNs  Feb05   0:00 zsh
aetheri+ 19879  0.0  0.0  35688  3228 pts/4    SN+  Feb05   0:11  \_ ssh forseti
aetheri+ 12155  0.0  0.0  32584  4032 pts/0    SNs  Feb05   0:00 zsh
aetheri+ 19923  0.8  0.0  15632  3680 pts/0    SN+  Feb05  12:03  \_ htop
aetheri+  9347  0.0  0.0 128972 21744 pts/1    SNsl+ Feb04   0:18 weechat-curses

2:  No there is no danger of these two processes interfering with eachother. The
    parent process is set to wait until the child has exited before continuing 
    its own operations since the new shell was started in the foreground.
    When the child exits it cleans up all of its file handles and associated
    memory so that there is nothing left over for the parent to interact with.
    Upon returning to the parent process, the parent reaps the child's entry
    out of the process table and then continues its own operation.

3: If the shell exits while there are still background processes running, those
   processes become orphans and are adoped by the init process.  It will occasionally
   run wait() to reap completed processes out of the process table.  If the user wants
   to know what background processes are still running they can execute ps -uf to
   generate a table similar to the one shown for #1.

4: Book #3.5
   During a fork the only resources *shared* between parent and child are shared
   memory segments.  The child is provided with its own unique and separate copy of
   the parent's address space in which to work in memory.

5: Book #3.9
   When the kernel performs a context switch it takes the current state of the CPU
   (PC, registers, etc.) and stores them in the PCB of the process that is being switched
   out.  Then the PCB of the process being switched in is loaded into the CPU returning it
   to the last state it held during the switched in process.  Some CPUs may also have 
   multiple register sets to reduce the time required to context switch by simply changing
   the pointer to the current working set of registers.

6: Book #3.12
   P
   |- C1 i = 0
   |  |- C2 i = 1
   |  |  |- C3 i = 2
   |  |  |  |- C4 i = 3
   |  |  |- C5 i = 3
   |  |- C6 i = 2
   |  |  |- C7 i = 3
   |  |- C8 i = 3
   |- C9 i = 1
   |  |- C10 i = 2
   |  |  |- C11 i = 3
   |  |- C12 i = 3
   |- C13 i = 2
   |  |- C14 i = 3
   |- C15 i = 3

   A total of  16 processes are created.  From the first fork(), a copy of the initial
   process is created (C1), so 1 child process would exist.  Now in C1 the loop continues
   and another child (C2) is created which then creates a child for itself (C3) and C3
   creates yet another child (C4) before reaching the exit state of the for loop.  Tracing
   back up the tree C2 spawns C5 before terminating itself.  C1 then spawns C6 and the 
   pattern continues down through the tree.

7: Book #3.15
   (1)  Ordinary pipes are more suitable than named pipes when we do not want to
   grant access through the pipes after the communication is finished, because
   ordinary pipes exist only while the processes are communicating with each other.
   (2) Named pipes are more suitable than ordinary pipes when the communication has
   to be bidirectional, and when the two processes have no parent-child relationship.
   Also, named pipes are more suitable for communication among several processes. 
   Named pipes can be used by several processes, and will continue to exist after 
   communicating processes have finished. 

8: Additonal Assumptions
   * Only the input or the output may be redirected from a command in a single line.  If a second redirect operator is applied then it and its operands are ignored.
   * Background processes should not suppress STDERR, only STDOUT, as the user should be alerted if there are errors in their background processes.